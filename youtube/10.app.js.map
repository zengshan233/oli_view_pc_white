{"version":3,"sources":["webpack:///./src/players/Vidyard.js"],"names":["Vidyard","callPlayer","setVolume","props","volume","container","this","onMount","url","playing","config","onError","onDuration","id","match","MATCH_URL_VIDYARD","player","stop","getSDK","then","api","addReadyListener","data","on","onReady","onPlay","onPause","onSeek","onEnded","renderPlayer","uuid","autoplay","options","getPlayerMetadata","meta","duration","length_in_seconds","window","VidyardV4","destroyPlayer","amount","fraction","rate","style","width","height","display","ref","Component","canPlay","vidyard"],"mappings":"67DAKA,IAIqBA,E,0dAGNC,K,eA0DN,WACL,EAAKC,UAAU,M,iBAGR,WACmB,OAAtB,EAAKC,MAAMC,QACb,EAAKF,UAAU,EAAKC,MAAMC,W,cAoBxB,SAAAC,GACJ,EAAKA,UAAYA,K,gDAnFnB,WACEC,KAAKH,MAAMI,SAAWD,KAAKH,MAAMI,QAAQD,Q,kBAG3C,SAAME,GAAK,WACT,EAAiDF,KAAKH,MAA9CM,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,OAAQC,EAAzB,EAAyBA,QAASC,EAAlC,EAAkCA,WAC5BC,EAAKL,GAAOA,EAAIM,MAAMC,KAAmB,GAC3CT,KAAKU,QACPV,KAAKW,OAEPC,YAnBY,uCACG,YACM,gBAiByBC,MAAK,SAAAnB,GAC5C,EAAKK,YACVL,EAAQoB,IAAIC,kBAAiB,SAACC,EAAMN,GAC9B,EAAKA,SAGT,EAAKA,OAASA,EACd,EAAKA,OAAOO,GAAG,QAAS,EAAKpB,MAAMqB,SACnC,EAAKR,OAAOO,GAAG,OAAQ,EAAKpB,MAAMsB,QAClC,EAAKT,OAAOO,GAAG,QAAS,EAAKpB,MAAMuB,SACnC,EAAKV,OAAOO,GAAG,OAAQ,EAAKpB,MAAMwB,QAClC,EAAKX,OAAOO,GAAG,iBAAkB,EAAKpB,MAAMyB,YAC3Cf,GACHb,EAAQoB,IAAIS,a,+VAAZ,EACEC,KAAMjB,EACNR,UAAW,EAAKA,UAChB0B,SAAUtB,EAAU,EAAI,GACrBC,EAAOsB,UAEZhC,EAAQoB,IAAIa,kBAAkBpB,GAAIM,MAAK,SAAAe,GACrC,EAAKC,SAAWD,EAAKE,kBACrBxB,EAAWsB,EAAKE,yBAEjBzB,K,kBAGL,WACEL,KAAKL,WAAW,U,mBAGlB,WACEK,KAAKL,WAAW,W,kBAGlB,WACEoC,OAAOC,UAAUlB,IAAImB,cAAcjC,KAAKU,U,oBAG1C,SAAQwB,GACNlC,KAAKL,WAAW,OAAQuC,K,uBAG1B,SAAWC,GACTnC,KAAKL,WAAW,YAAawC,K,6BAa/B,SAAiBC,GACfpC,KAAKL,WAAW,mBAAoByC,K,yBAGtC,WACE,OAAOpC,KAAK6B,W,4BAGd,WACE,OAAO7B,KAAKL,WAAW,iB,8BAGzB,WACE,OAAO,O,oBAOT,WACE,IACM0C,EAAQ,CACZC,MAAO,OACPC,OAAQ,OACRC,QAJkBxC,KAAKH,MAAjB2C,SAMR,OACE,yBAAKH,MAAOA,GACV,yBAAKI,IAAKzC,KAAKyC,Y,iFApGcC,a,EAAhBhD,E,cACE,W,EADFA,E,UAEFiD,IAAQC","file":"10.app.js","sourcesContent":["import React, { Component } from 'react'\n\nimport { callPlayer, getSDK } from '../utils'\nimport { canPlay, MATCH_URL_VIDYARD } from '../patterns'\n\nconst SDK_URL = 'https://play.vidyard.com/embed/v4.js'\nconst SDK_GLOBAL = 'VidyardV4'\nconst SDK_GLOBAL_READY = 'onVidyardAPI'\n\nexport default class Vidyard extends Component {\n  static displayName = 'Vidyard'\n  static canPlay = canPlay.vidyard\n  callPlayer = callPlayer\n\n  componentDidMount () {\n    this.props.onMount && this.props.onMount(this)\n  }\n\n  load (url) {\n    const { playing, config, onError, onDuration } = this.props\n    const id = url && url.match(MATCH_URL_VIDYARD)[1]\n    if (this.player) {\n      this.stop()\n    }\n    getSDK(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY).then(Vidyard => {\n      if (!this.container) return\n      Vidyard.api.addReadyListener((data, player) => {\n        if (this.player) {\n          return\n        }\n        this.player = player\n        this.player.on('ready', this.props.onReady)\n        this.player.on('play', this.props.onPlay)\n        this.player.on('pause', this.props.onPause)\n        this.player.on('seek', this.props.onSeek)\n        this.player.on('playerComplete', this.props.onEnded)\n      }, id)\n      Vidyard.api.renderPlayer({\n        uuid: id,\n        container: this.container,\n        autoplay: playing ? 1 : 0,\n        ...config.options\n      })\n      Vidyard.api.getPlayerMetadata(id).then(meta => {\n        this.duration = meta.length_in_seconds\n        onDuration(meta.length_in_seconds)\n      })\n    }, onError)\n  }\n\n  play () {\n    this.callPlayer('play')\n  }\n\n  pause () {\n    this.callPlayer('pause')\n  }\n\n  stop () {\n    window.VidyardV4.api.destroyPlayer(this.player)\n  }\n\n  seekTo (amount) {\n    this.callPlayer('seek', amount)\n  }\n\n  setVolume (fraction) {\n    this.callPlayer('setVolume', fraction)\n  }\n\n  mute = () => {\n    this.setVolume(0)\n  }\n\n  unmute = () => {\n    if (this.props.volume !== null) {\n      this.setVolume(this.props.volume)\n    }\n  }\n\n  setPlaybackRate (rate) {\n    this.callPlayer('setPlaybackSpeed', rate)\n  }\n\n  getDuration () {\n    return this.duration\n  }\n\n  getCurrentTime () {\n    return this.callPlayer('currentTime')\n  }\n\n  getSecondsLoaded () {\n    return null\n  }\n\n  ref = container => {\n    this.container = container\n  }\n\n  render () {\n    const { display } = this.props\n    const style = {\n      width: '100%',\n      height: '100%',\n      display\n    }\n    return (\n      <div style={style}>\n        <div ref={this.ref} />\n      </div>\n    )\n  }\n}\n"],"sourceRoot":""}