{"version":3,"sources":["webpack:///./src/players/Mixcloud.js"],"names":["Mixcloud","callPlayer","iframe","this","props","onMount","url","getSDK","then","player","PlayerWidget","ready","events","play","on","onPlay","pause","onPause","ended","onEnded","error","progress","seconds","duration","currentTime","onReady","onError","fraction","config","id","match","MATCH_URL_MIXCLOUD","query","queryString","options","feed","key","ref","style","width","height","src","frameBorder","Component","canPlay","mixcloud"],"mappings":"6xEAKA,IAGqBA,E,0dAINC,K,kBACF,M,qBACG,M,uBACE,M,eA2CT,e,iBAIE,e,cAgBH,SAAAC,GACJ,EAAKA,OAASA,K,gDA9DhB,WACEC,KAAKC,MAAMC,SAAWF,KAAKC,MAAMC,QAAQF,Q,kBAG3C,SAAMG,GAAK,WACTC,YAjBY,oDACG,YAgBaC,MAAK,SAAAR,GAC/B,EAAKS,OAAST,EAASU,aAAa,EAAKR,QACzC,EAAKO,OAAOE,MAAMH,MAAK,WACrB,EAAKC,OAAOG,OAAOC,KAAKC,GAAG,EAAKV,MAAMW,QACtC,EAAKN,OAAOG,OAAOI,MAAMF,GAAG,EAAKV,MAAMa,SACvC,EAAKR,OAAOG,OAAOM,MAAMJ,GAAG,EAAKV,MAAMe,SACvC,EAAKV,OAAOG,OAAOQ,MAAMN,GAAG,EAAKV,MAAMgB,OACvC,EAAKX,OAAOG,OAAOS,SAASP,IAAG,SAACQ,EAASC,GACvC,EAAKC,YAAcF,EACnB,EAAKC,SAAWA,KAElB,EAAKnB,MAAMqB,eAEZtB,KAAKC,MAAMsB,W,kBAGhB,WACEvB,KAAKF,WAAW,U,mBAGlB,WACEE,KAAKF,WAAW,W,kBAGlB,c,oBAIA,SAAQqB,GACNnB,KAAKF,WAAW,OAAQqB,K,uBAG1B,SAAWK,M,yBAYX,WACE,OAAOxB,KAAKoB,W,4BAGd,WACE,OAAOpB,KAAKqB,c,8BAGd,WACE,OAAO,O,oBAOT,WACE,MAAwBrB,KAAKC,MAArBE,EAAR,EAAQA,IAAKsB,EAAb,EAAaA,OACPC,EAAKvB,EAAIwB,MAAMC,KAAoB,GAKnCC,EAAQC,YAAY,EAAD,KACpBL,EAAOM,SADa,IAEvBC,KAAM,IAAF,OAAMN,EAAN,QAIN,OACE,4BACEO,IAAKP,EACLQ,IAAKlC,KAAKkC,IACVC,MAdU,CACZC,MAAO,OACPC,OAAQ,QAaNC,IAAG,kDAA6CT,GAChDU,YAAY,W,iFA7FkBC,a,EAAjB3C,E,cACE,Y,EADFA,E,UAEF4C,IAAQC,U,EAFN7C,E,eAGE","file":"5.app.js","sourcesContent":["import React, { Component } from 'react'\n\nimport { callPlayer, getSDK, queryString } from '../utils'\nimport { canPlay, MATCH_URL_MIXCLOUD } from '../patterns'\n\nconst SDK_URL = 'https://widget.mixcloud.com/media/js/widgetApi.js'\nconst SDK_GLOBAL = 'Mixcloud'\n\nexport default class Mixcloud extends Component {\n  static displayName = 'Mixcloud'\n  static canPlay = canPlay.mixcloud\n  static loopOnEnded = true\n  callPlayer = callPlayer\n  duration = null\n  currentTime = null\n  secondsLoaded = null\n\n  componentDidMount () {\n    this.props.onMount && this.props.onMount(this)\n  }\n\n  load (url) {\n    getSDK(SDK_URL, SDK_GLOBAL).then(Mixcloud => {\n      this.player = Mixcloud.PlayerWidget(this.iframe)\n      this.player.ready.then(() => {\n        this.player.events.play.on(this.props.onPlay)\n        this.player.events.pause.on(this.props.onPause)\n        this.player.events.ended.on(this.props.onEnded)\n        this.player.events.error.on(this.props.error)\n        this.player.events.progress.on((seconds, duration) => {\n          this.currentTime = seconds\n          this.duration = duration\n        })\n        this.props.onReady()\n      })\n    }, this.props.onError)\n  }\n\n  play () {\n    this.callPlayer('play')\n  }\n\n  pause () {\n    this.callPlayer('pause')\n  }\n\n  stop () {\n    // Nothing to do\n  }\n\n  seekTo (seconds) {\n    this.callPlayer('seek', seconds)\n  }\n\n  setVolume (fraction) {\n    // No volume support\n  }\n\n  mute = () => {\n    // No volume support\n  }\n\n  unmute = () => {\n    // No volume support\n  }\n\n  getDuration () {\n    return this.duration\n  }\n\n  getCurrentTime () {\n    return this.currentTime\n  }\n\n  getSecondsLoaded () {\n    return null\n  }\n\n  ref = iframe => {\n    this.iframe = iframe\n  }\n\n  render () {\n    const { url, config } = this.props\n    const id = url.match(MATCH_URL_MIXCLOUD)[1]\n    const style = {\n      width: '100%',\n      height: '100%'\n    }\n    const query = queryString({\n      ...config.options,\n      feed: `/${id}/`\n    })\n    // We have to give the iframe a key here to prevent a\n    // weird dialog appearing when loading a new track\n    return (\n      <iframe\n        key={id}\n        ref={this.ref}\n        style={style}\n        src={`https://www.mixcloud.com/widget/iframe/?${query}`}\n        frameBorder='0'\n      />\n    )\n  }\n}\n"],"sourceRoot":""}